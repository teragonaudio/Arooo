/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "../JuceLibraryCode/JuceHeader.h"
#include "InputProcessor.h"
#include "MainComponent.h"
#include "LogWrapper.h"

class MainWindow : public DocumentWindow, public GuiLogger {
public:
  MainWindow() : DocumentWindow("Arooo", Colours::lightgrey,
    DocumentWindow::closeButton | DocumentWindow::minimiseButton, true) {
    mainComponent = new MainComponent();
    setContentOwned(mainComponent, true);
    centreWithSize(getWidth(), getHeight());
    setVisible(true);
  }
  ~MainWindow() {}

  void closeButtonPressed() {
    JUCEApplication::quit();
  }

  virtual void logMessage(const String& message) {
    const MessageManagerLock lock;
    mainComponent->logText(message);
  }

private:
  ScopedPointer<MainComponent> mainComponent;
};

//==============================================================================
class AroooApplication : public JUCEApplication {
public:
  //==============================================================================
  AroooApplication() {
    inputProcessor = new InputProcessor();
  }

  const String getApplicationName() {
    return ProjectInfo::projectName;
  }

  const String getApplicationVersion() {
    return ProjectInfo::versionString;
  }

  bool moreThanOneInstanceAllowed() {
    return false;
  }

  //==============================================================================
  void initialise(const String& commandLine) {
    mainWindow = new MainWindow();
    LogWrapper *logWrapper = new LogWrapper(mainWindow);
    Logger::setCurrentLogger(logWrapper);
    inputProcessor->initialize();
  }

  void shutdown() {
    if (inputProcessor) {
      delete inputProcessor;
    }

    Logger *logger = Logger::getCurrentLogger();
    if (logger) {
      Logger::setCurrentLogger(nullptr);
      delete logger;
    }

    mainWindow = nullptr;
  }

  //==============================================================================
  void systemRequestedQuit() {
    // This is called when the app is being asked to quit: you can ignore this
    // request and let the app carry on running, or call quit() to allow the app to close.
    quit();
  }

  void anotherInstanceStarted(const String& commandLine) {
    // When another instance of the app is launched while this one is running,
    // this method is invoked, and the commandLine parameter tells you what
    // the other instance's command-line arguments were.
  }

private:
  ScopedPointer<MainWindow> mainWindow;
  InputProcessor *inputProcessor;
};

//==============================================================================
// This macro generates the main() routine that launches the app.
START_JUCE_APPLICATION (AroooApplication)
